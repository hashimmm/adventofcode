cpy a b
dec b
cpy a d
cpy 0 a
cpy b c
inc a
dec c
jnz c -2
dec d
jnz d -5
dec b
cpy b c
cpy c d
dec d
inc c
jnz d -2
tgl c
cpy -16 c
jnz 1 c
cpy 75 c
jnz 97 d
inc a
inc d
jnz d -2
inc c
jnz c -5
#lang racket

(define-namespace-anchor a)

(require 2htdp/batch-io)

(define input (read-lines 'stdin))
(define last-line (length input))
last-line
(define program-counter 0)

(struct instruction (fun name args))

(define (get-num r x)
  (let ([try-num (string->number x)])
    (or try-num (hash-ref r x))))

(define cpy
  '(lambda (i r pc x y)
     (values i (hash-set r y x)) (+ 1 pc)))

(define jnz
  '(lambda (i r pc x y)
     (if (= 0 x)
         (values i r (+ 1 pc))
         (values i r (+ pc y)))))

(define inc
  '(lambda (i r pc x)
     (displayln "INC")
     (displayln pc)
     (displayln x)
     (values i (hash-set r x (+ 1 (hash-ref r x))) (+ 1 pc))))

(define dec
  '(lambda (i r pc x)
     (values i (hash-set r x (- (hash-ref r x) 1)) (+ 1 pc))))

(define tgl
  '(lambda (i r pc x)
     (cond [(>= x (length i))
            (values i r (+ 1 pc))]
           [else
            (define inst (list-ref i x))
            (match-define (fun name args)
              (instruction-fun inst) (instruction-name inst) (instruction-args inst))
            (values (if (= (length (first (rest fun))) 4)
                        (if (equal? name "inc")
                            (list-set i x (instruction dec "dec" args))
                            (list-set i x (instruction inc "inc" args)))
                        (if (equal? name "jnz")
                            (list-set i x (instruction cpy "cpy" args))
                            (list-set i x (instruction jnz "jnz" args))))
                    r (+ 1 pc))])))

(define instructions
  (for/list ([line (in-list input)])
    (match-define (list command args ...) (regexp-split " " line))
    (instruction (eval (string->symbol command) (namespace-anchor->namespace a)) command args)))

(define (run i r pc)
  ;(call-with-exception-handler
   ;(Î»(x) (values i r (+ pc 1)))
   (let ([inst (list-ref i pc)])
     (displayln (instruction-fun inst))
     (displayln (eval (instruction-fun inst) (namespace-anchor->namespace a)))
     (displayln (append (list i r pc) (map (curry get-num r) (instruction-args inst))))
     (define return-val
       (apply (eval (instruction-fun inst) (namespace-anchor->namespace a))
              (append (list i r pc) (map (curry get-num r) (instruction-args inst)))))
     return-val))

(for/fold ([i instructions]
           [registers (hash "a" 0 "b" 0 "c" 0 "d" 0)]
           [PC program-counter])
          ([x (in-range 0 10 0)])
  #:break (PC . >= . last-line)
  (displayln PC)
  (displayln registers)
  (run i registers PC))
